// Generated by CoffeeScript 1.6.1
"use strict";
var clients, history, htmlEntities, http, server, webSocketServer, webSocketsServerPort, wsServer;

webSocketsServerPort = 1337;

webSocketServer = require('websocket').server;

http = require('http');

/*
 * Global variables
*/


history = [];

clients = [];

/*
 * Helper function for escaping input strings
*/


htmlEntities = function(str) {
  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
};

/*
 * HTTP server
*/


server = http.createServer(function(request, response) {});

server.listen(webSocketsServerPort, function() {
  return console.log((new Date()) + " Server is listening on port " + webSocketsServerPort);
});

/*
 * WebSocket server
*/


wsServer = new webSocketServer({
  httpServer: server
});

wsServer.on('request', function(request) {
  var connection, index, userName;
  console.log((new Date()) + ' Connection from origin ' + request.origin + '.');
  connection = request.accept(null, request.origin);
  index = clients.push(connection) - 1;
  userName = false;
  console.log((new Date()) + ' Connection accepted.');
  if (history.length > 0) {
    if (history.length > 0) {
      connection.sendUTF(JSON.stringify({
        type: 'history',
        data: history
      }));
    }
  }
  connection.on('message', function(message) {
    var client, json, obj, _i, _len, _results;
    if (message.type === !'utf8') {
      return;
    }
    if (userName === false) {
      userName = htmlEntities(message.utf8Data);
      connection.sendUTF(JSON.stringify({
        type: 'acceptNickname',
        data: userName
      }));
      return console.log((new Date()) + ' User is known as: ' + userName);
    } else {
      console.log((new Date()) + ' Received Message from ', +userName + ': ' + message.utf8Data);
      obj = {
        time: (new Date()).getTime(),
        text: htmlEntities(message.utf8Data),
        author: userName
      };
      history.push(obj);
      history = history.slice(-100);
      json = JSON.stringify({
        type: 'message',
        data: obj
      });
      _results = [];
      for (_i = 0, _len = clients.length; _i < _len; _i++) {
        client = clients[_i];
        _results.push(client.sendUTF(json));
      }
      return _results;
    }
  });
  return connection.on('close', function(connection) {
    if (userName === false) {
      return;
    }
    console.log((new Date()) + " Peer " + connection.remoteAddress + " disconnected.");
    return clients.splice(index, 1);
  });
});
