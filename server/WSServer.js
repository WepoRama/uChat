// Generated by CoffeeScript 1.6.1
"use strict";
var clients, doUserName, history, htmlEntities, http, server, userNames, webSocketServer, webSocketsServerPort, wsServer;

webSocketsServerPort = 8088;

webSocketServer = require('websocket').server;

http = require('http');

/*
 * Global variables
*/


history = [];

clients = [];

userNames = {};

userNames['nono'] = true;

/*
 * Helper function for escaping input strings
*/


htmlEntities = function(str) {
  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
};

doUserName = function(connection, message) {
  var userName;
  userName = htmlEntities(message);
  console.log((new Date()) + ' Checking: ' + userName);
  if (userNames[userName]) {
    connection.sendUTF(JSON.stringify({
      type: 'refuseNickname',
      data: userName
    }));
    console.log((new Date()) + ' User refused (existing): ' + userName);
    return false;
  }
  userNames[userName] = true;
  connection.sendUTF(JSON.stringify({
    type: 'acceptNickname',
    data: userName
  }));
  console.log((new Date()) + ' User is known as: ' + userName);
  return userName;
};

/*
 * HTTP server
*/


server = http.createServer(function(request, response) {});

server.listen(webSocketsServerPort, function() {
  return console.log((new Date()) + " Server is listening on port " + webSocketsServerPort);
});

/*
 * WebSocket server
*/


wsServer = new webSocketServer({
  httpServer: server
});

wsServer.on('request', function(request) {
  var connection, index, userName;
  console.log((new Date()) + ' Connection from origin ' + request.origin + '.');
  /*
  # accept connection - you should check 'request.origin' to make sure that
  # client is connecting from your website
  # (http://en.wikipedia.org/wiki/Same_origin_policy)
  */

  connection = request.accept(null, request.origin);
  index = clients.push(connection) - 1;
  userName = false;
  console.log((new Date()) + ' Connection accepted.');
  connection.on('message', function(messageObj) {
    var chat, client, json, message, obj, _i, _len, _results;
    if (messageObj.type !== 'utf8') {
      console.log('Rejecting funny stuff');
      return;
    }
    message = JSON.parse(messageObj.utf8Data);
    console.log((new Date()) + ' Received Message type: ' + message.type + ' data: ' + message.data);
    if (userName === false) {
      userName = doUserName(connection, message.data);
      console.log((new Date()) + ' Recognize user: ' + userName);
      return;
    }
    chat = message.data;
    console.log((new Date()) + ' Received Message from ' + userName + ': ' + chat);
    obj = {
      time: (new Date()).getTime(),
      text: htmlEntities(chat),
      author: userName
    };
    history.push(obj);
    history = history.slice(-100);
    json = JSON.stringify({
      type: 'message',
      data: obj
    });
    _results = [];
    for (_i = 0, _len = clients.length; _i < _len; _i++) {
      client = clients[_i];
      _results.push(client.sendUTF(json));
    }
    return _results;
  });
  return connection.on('close', function(connection) {
    if (userName === false) {
      return;
    }
    console.log((new Date()) + " Peer " + connection.remoteAddress + " disconnected.");
    return clients.splice(index, 1);
  });
});
